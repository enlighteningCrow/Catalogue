/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package org.AOOPProject;

import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Paths;
import java.util.LinkedList;
import java.util.Queue;
import java.util.regex.Pattern;

import javax.swing.AbstractListModel;

/**
 *
 * @author twistingcamel
 */
public class FileContentsDisplayer extends javax.swing.JPanel {

        /**
         * Creates new form FileContentsDisplayer
         */
        public FileContentsDisplayer(String[] fileSearchPaths) {
                initComponents();
                populator = new FileSystemPopulator(fileSearchPaths);
                currentFilePath = new File[0];
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated
        // Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                jScrollPane1 = new javax.swing.JScrollPane();
                jList1 = new javax.swing.JList<>();
                jScrollPane2 = new javax.swing.JScrollPane();
                jList2 = new javax.swing.JList<>();
                jScrollPane3 = new javax.swing.JScrollPane();
                jList3 = new javax.swing.JList<>();

                setLayout(new java.awt.GridBagLayout());

                jList1.setModel(new javax.swing.AbstractListModel<String>() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

                        public int getSize() {
                                return strings.length;
                        }

                        public String getElementAt(int i) {
                                return strings[i];
                        }
                });
                jScrollPane1.setViewportView(jList1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                add(jScrollPane1, gridBagConstraints);

                jList2.setModel(new javax.swing.AbstractListModel<String>() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

                        public int getSize() {
                                return strings.length;
                        }

                        public String getElementAt(int i) {
                                return strings[i];
                        }
                });
                jScrollPane2.setViewportView(jList2);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                add(jScrollPane2, gridBagConstraints);

                jList3.setModel(new javax.swing.AbstractListModel<String>() {
                        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };

                        public int getSize() {
                                return strings.length;
                        }

                        public String getElementAt(int i) {
                                return strings[i];
                        }
                });
                jScrollPane3.setViewportView(jList3);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                add(jScrollPane3, gridBagConstraints);
        }// </editor-fold>//GEN-END:initComponents

        // Additional variables
        // private File currentPath;

        private class FileSystemModel extends AbstractListModel<File> {
                File[] files;

                public FileSystemModel(File[] files) {
                        this.files = files;
                }

                public File[] getFiles() {
                        return files;
                }

                public void setFiles(File[] files) {
                        this.files = files;
                }

                @Override
                public File getElementAt(int index) {
                        return files[index];
                }

                @Override
                public int getSize() {
                        return files.length;
                }

        }

        File[] currentFilePath;

        // TODO: Make a class to handle a an array of JList that stores the files and
        // update them and their models
        // Note: Only one layer deeper than the currently selected file
        // (currentFilePath[currentFilePath.length - 1]) should be shown in the jLists.
        // TODO: Make a variable (setting) to store the maximum number of columns up the
        // directory that should be shown
        // TODO: manage the cursor position with shortcuts from the keyboard.
        private File[] getLeftCol() {
                // if (currentFilePath.length == 0) {
                // return currentFilePath[currentFilePath.length -1 ]
                // }
                return new File[0];
        }

        private File[] getMiddleCol() {
                // return currentPath.getParentFile().listFiles();
                return new File[0];
        }

        private File[] getRightCol() {
                // return currentPath.listFiles();
                return new File[0];
        }

        private FileSystemModel leftModel = new FileSystemModel(getLeftCol()),
                        middleModel = new FileSystemModel(getMiddleCol()),
                        righModel = new FileSystemModel(getRightCol());

        // private void updateMiddleModel() {
        // middleModel.setFiles(currentPath.getParentFile().listFiles());
        // }

        private class FileSystemPopulator {
                // Note: path strings with '/' separator
                String[] searchPaths;
                File[] rootContents;

                public FileSystemPopulator(String[] searchPaths) {
                        this.searchPaths = searchPaths;
                        update();
                }

                public File[] getRootContents() {
                        return rootContents;
                }

                private class RegexFileFilter implements FileFilter {
                        Pattern pattern;

                        // TODO: check the regex part, something wrong
                        public RegexFileFilter(String pattern) {
                                this.pattern = Pattern.compile(pattern);
                        }

                        @Override
                        public boolean accept(File pathname) {
                                return pattern.matcher(pathname.getName()).matches();
                        }

                }

                private void populate(int depth, String[] searchPath, File currentFile) {
                        if (depth == searchPath.length - 1)
                                currentFile.listFiles(new RegexFileFilter(searchPath[depth]));
                        else if (depth >= searchPath.length)
                                for (File file : currentFile.listFiles(new RegexFileFilter(searchPath[depth]))) {
                                        populate(depth + 1, searchPath, file);
                                }
                        else
                                throw new RuntimeException("Depth could not exceed the length of searchPath");

                }

                public void update() {
                        for (String searchPath : searchPaths) {
                                String[] pathComps = searchPath.split("/");
                                if (pathComps.length == 0)
                                        throw new InvalidPathException(searchPath, "search path is empty");
                                if (pathComps[0] == "*") {
                                        // TODO: Check if this is right
                                        populate(0, pathComps, new File(System.getProperty("user.home")));
                                } else {
                                        if (pathComps[0].length() == 0) {
                                                pathComps[0] = "/";
                                                populate(1, pathComps, new File(pathComps[0]));
                                        }
                                }
                        }
                }
        }

        FileSystemPopulator populator;
        // TODO: Change the below jLists; use a resizable array of them instead, such
        // that
        // there can be a variable number for columns

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JList<String> jList1;
        private javax.swing.JList<String> jList2;
        private javax.swing.JList<String> jList3;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        // End of variables declaration//GEN-END:variables
}
